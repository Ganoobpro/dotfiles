✦•┈๑⋅⋯ HIERARCHY and INHERITANCE ⋯⋅๑┈•✦

  [ Hierarchy ]

    [ Definition ]
      - Hierarchy refers to the structural organization of classes in a system.
      - It shows how classes are related to one another in a "tree-like" structure.
      - The top of the hierarchy is usually a base (parent) class, and the lower levels are derived (child) classes.

    [ Example ]
        Animal
        ├── Mammal
        │    ├── Dog
        │    └── Cat
        └── Bird
              └── Sparrow



  [ Inheritance ]
    
    [ Definition ]
      - Inheritance is the mechanism that allows one class (child/derived class) to acquire the properties and behaviors (fields and methods) of another class (parent/base class).
      - It enables code reuse, extensibility, and represents "is-a" relationships.

    [ Example ]
        public class Vehicle {
          protected String licensePlate = null;

          public void setLicensePlate(String license) {
            this.licensePlate = license;
          }
        }

        public class Car extends Vehicle {
          int numberOfSeats = 0;

          public String getNumberOfSeats() {
            return this.numberOfSeats;
          }
        }
    
    [ Casting ]
      
      [ Upcasting ]
        Car car = new Car();
        // upcast to Vehicle
        Vehicle vehicle = car;

      [ Downcasting ]
        Vehicle vehicle = new Vehicle();
        // downcast to Car
        Car car = (Car) vehicle;
        // HOWEVER: This example is not valid in
        // Java compiler will accept it,
        // but at runtime the code will throw a ClassCastException

    [ Overriding Methods ]

      [ Example ]
          public class Vehicle {
            String licensePlate = null;

            public void setLicensePlate(String licensePlate) {
              this.licensePlate = licensePlate;
            }
          }

          public class Car extends Vehicle {
            // However: this will also redefine methods in the superclass

            public void setLicensePlate(String license) {
              this.licensePlate = license.toLowerCase();
            }
         }

      [ @Override ]
          public class Car extends Vehicle {
            // @Override will stop this class redefine methods in the superclass

            @Override
            public void setLicensePlate(String license) {
              this.licensePlate = license.toLowerCase();
            }
          }

      [ Calling Superclass Methods ]
          public class Car extends Vehicle {
            public void setLicensePlate(String license) {
              // Call the superclass
              super.setLicensePlate(license);
            }
          }

      [ Instruction: instanceof ]
        - The instanceof instruction can determine whether a given object is an instance of some class.
            Car car = new Car();
            // isCar: true
            boolean isCar = car instanceof Car;

        - The instanceof instruction can also be used determine if an object is a instance of a superclass of its class.
            Car car = new Car();
            // isCar: true
            boolean isVehicle = car instanceof Vehicle;

        - The variable type used with the instanceof instruction does not affect its outcome.
            Car car = new Car();
            Vehicle vehicle = car;
            // isCar: true
            boolean isCar = vehicle instanceof Car;
