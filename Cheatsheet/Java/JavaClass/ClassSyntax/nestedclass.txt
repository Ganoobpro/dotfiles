✦•┈๑⋅⋯ NESTED CLASS ⋯⋅๑┈•✦
  [ Static Nested Class ]
    [ Syntax ]
        public class Outer {
            public static class Nested {
            }
        }

        Outer.Nested instance = new Outer.Nested();

    [ Definition & Usage ]
      - Static nested class is just a normal class nested inside another class.
      - In Java you can't directly make a static function.
        -> Therefore the only way to make static class in Java is make all the children inside the class static.

  [ Non-static Nested Classes ]
    [ Normal Syntax ]
        public class Outer {
            public class Nested {
            }
        }

        // 1
        Outer outer = new Outer();
        Outer.Inner inner = outer.new Inner();
        // 2
        Outer.Inner inner = new Outer().new Inner();

    [ Inner Class Shadow ]
        public class Outer {
            private String text = "I am Outer private!";

            public class Inner {
                private String text = "I am Inner private";
                public void printText() {
                    System.out.println(text);
                }
            }
        }

      - Java will always priority variable in Inner over Outer class.
      - So if you want to access Outer variable, you must call 'Outer.this.text'.

    [ Definition & Usage ]
      - Non-static nested class is just a normal class nested inside another class.
      - To make code more readable.

  [ Local Classes ]
    [ Syntax ]
        class Outer {
            public void printText() {
                class Local {
                }
                Local local = new Local();
            }
        }

    [ Definition ]
      - Local class is like inner class (non-static nested class) that defined inside a method or a scoop block ({...}).
      - Local class can access allmost anything that outer has.
      - However local class can ONLY BE ACCESSED from inside the method or scope block which they are defined.
      * Note: The same shadowing rules apply for local classes as for inner classes.

  [ Anonymous Classes ]
    [ Syntax ]
        // 1
        public interface MyInterface {
          public void doIt(); // Anonymous class
        }
        MyInterface instance = new MyInterface() {
            public void doIt() {
                System.out.println("Anonymous class doIt()");
            }
        };
        instance.doIt();

        // 2
        public class SuperClass {
          public void doIt() { // Anonymous class
            System.out.println("SuperClass doIt()");
          }
        }
        SuperClass instance = new SuperClass() {
            public void doIt() {
                System.out.println("Anonymous class doIt()");
            }
        };
        instance.doIt();

    [ Definition & Usage ]
      - Anonymous classes is created to be overriden. (Helpful to work with more abstract OOP)
      * Note: The same shadowing rules apply for local classes as for inner classes.
